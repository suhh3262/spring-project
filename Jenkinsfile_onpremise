    pipeline {
    agent any

    tools {
        jdk "jdk17"
        gradle "Ga"
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhubToken') 
        IMAGE = 'pinkcandy02/springproject'  // Docker 이미지 이름
        NAMESPACE = 'spring-project'  // 배포할 Kubernetes 네임스페이스 (필요 시 변경)
        KUBECONFIG_CREDENTIALS = credentials('kube-config-id')  // Kubeconfig 파일에 대한 Jenkins 자격 증명
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'git-token',
                    url: 'https://github.com/suhh3262/spring-project.git'
            }
        }

        stage('Gradle Build') {
            steps {
                echo 'Gradle Build'
                sh 'chmod +x ./gradlew'  // 실행 권한 부여
                sh './gradlew build -x test'  // 테스트를 제외하고 빌드
            }
        }

        stage('Docker Image Build') {
            steps {
                echo 'Docker Image Build'
                dir("${env.WORKSPACE}") {
                    sh """
                        docker build -t pinkcandy02/springproject:$BUILD_NUMBER .
                        docker tag pinkcandy02/springproject:$BUILD_NUMBER pinkcandy02/springproject:latest
                    """
                }
            }
        }

        stage('Docker Login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Docker Image Push') {
            steps {
                echo 'Docker Image Push'
                sh "docker push pinkcandy02/springproject:latest"
            }
        }

        stage('Cleaning up') {
            steps {
                echo 'Cleaning up unused Docker images on Jenkins server'
                sh """
                    docker rmi pinkcandy02/springproject:$BUILD_NUMBER
                    docker rmi pinkcandy02/springproject:latest
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes Cluster'
                withCredentials([file(credentialsId: 'kube-config-id', variable: 'KUBECONFIG')]) {
                    dir("${env.WORKSPACE}") {
                        // Kubernetes 배포 파일을 workspace에 넣고 참조
                        sh '''
                        export PATH=$PATH:/usr/bin
                        kubectl apply -f ${env.WORKSPACE}/k8s/deployment.yaml -n ${NAMESPACE}
                        kubectl apply -f ${env.WORKSPACE}/k8s/service.yaml -n ${NAMESPACE}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment to Kubernetes was successful!"
        }
        failure {
            echo "Deployment to Kubernetes failed."
        }
    }
}
